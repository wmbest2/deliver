#! /usr/bin/python

import argparse
import os
import keyring
import smtplib

from modules import *
from modules.actions import *
from ansi2html import Ansi2HTMLConverter

app_name = 'deliver_python_app'
modules = []

def get_password():
    #print "Please enter your password:"
    os.system("stty -echo")
    password = raw_input("Password: ")
    os.system("stty echo")
    print "\n"
    return password

def process(args, msg):
    msg.append_html("<h1>Vokal Delivery</h1>")

    return msg

def start_request(args):

    username = ''
    while not username or username == '':
        username = raw_input("Username: ")

    password = keyring.get_password(app_name, username)

    if not password or password == '':
        password = get_password()

    try:

        msg = message.Message()
        msg = process(args, msg)
        msg = modules.android.process(args, msg)
        msg = modules.git.process(args, msg)

        msg.send(username, password)

        keyring.set_password(app_name, username, password)
    except smtplib.SMTPAuthenticationError:
        print 'Clearing keychain'
        #Clear the keyring for this user
        keyring.set_password(app_name, username, '')
        print 'Please try again or press Ctrl-C'
        start_request(args, filepath)

def try_load_from_default(parser, args):
    filepath = 'deliver.yaml'
    if os.path.exists(filepath):
        setattr(args, 'config', filepath);
        action = SetDefaultFromYAMLFile(None, 'config')
        action.__call__(parser, args, filepath)
        return

if __name__ == '__main__':
    os.system("stty echo")
    parser = argparse.ArgumentParser(description="Build Delivery Utility", add_help=False, epilog='Will automatically look for bin/*-debug.apk and bin/*-release.apk files.  These files are sent with a message via gmail to the recipients')

    parser.add_argument('-c', '--config', dest='config', action=SetDefaultFromYAMLFile, help='Set the config file, default.yaml')

    args, remaining = parser.parse_known_args()

    if not args.config:
        try_load_from_default(parser, args)

    if args.modules:
        for module in args.modules.split(" "):
            try:
                mod = __import__('modules.' + module, fromlist=[''])
                print 'modules.' + module
                modules.append(mod)
            except:
                pass

    parser = argparse.ArgumentParser(parents=[parser])

    for module in modules:
        module.setup_args(parser)

    parser.add_argument(dest='email', nargs="+", help='A list of email addresses')

    args = parser.parse_args()
    start_request(args)
